//class of courses
class Class {
    constructor(name, detail) {
        this.name = name;
        this.detail = detail;
        this.hidden = false;
    }

    getName() {
        return this.name;
    }

    getDetail() {
        return this.detail;
    }
}

//class of table
class Table {
    constructor(index, name, detail) {
        this.index = index;
        this.name = name;
        this.detail = detail;
    }

    getIndex() {
        return this.index;
    }

    getName() {
        return this.name;
    }

    getDetail() {
        return this.detail;
    }
}

//showing lower list
function showList() {
    $("#fall").empty();
    $("#winter").empty();
    $("#spring").empty();
    $("#summer").empty();
    $.each(fallList, function (n, item) {
        if (!item["hidden"])
            $("#fall").append('<a class="list-group-item" onclick="fallClick(' + n + ')">\n' +
                '                    <span class="badge">+</span>\n' + item["name"] + '</a>');
    })
    $.each(winterList, function (n, item) {
        if (!item["hidden"])
            $("#winter").append('<a class="list-group-item" onclick="winterClick(' + n + ')">\n' +
                '                    <span class="badge">+</span>\n' + item["name"] + '</a>');
    })
    $.each(springList, function (n, item) {
        if (!item["hidden"])
            $("#spring").append('<a class="list-group-item" onclick="springClick(' + n + ')">\n' +
                '                    <span class="badge">+</span>\n' + item["name"] + '</a>');
    })
    $.each(summerList, function (n, item) {
        if (!item["hidden"])
            $("#summer").append('<a class="list-group-item" onclick="summerClick(' + n + ')">\n' +
                '                    <span class="badge">+</span>\n' + item["name"] + '</a>');
    })
    saveDataToLocal();
}

// 4 columns' data form a table
function computeTableData() {
    var datas = new Array();
    for (var i = 0; i < 15; i++) {
        const item = {
            term: (parseInt(i / 5) + 1),
            fall: fallTable[i]["name"],
            winter: winterTable[i]["name"],
            spring: springTable[i]["name"],
            summer: summerTable[i]["name"]
        };
        datas.push(item);
    }
    return datas;
}

// initializa table
function initTable(datas) {
    $('#table').bootstrapTable({
        clickToSelect: true,
        classes: 'table',
        striped: true,
        // hover: false,
        columns: [{
            valign: "middle",
            align: 'center',
            field: 'term',
            title: '',
        }, {
            valign: "middle",
            align: 'center',
            field: 'fall',
            title: 'Fall'

        }, {
            valign: "middle",
            align: 'center',
            field: 'winter',
            title: 'Winter'
        }, {
            valign: "middle",
            align: 'center',
            field: 'spring',
            title: 'Spring'
        }, {
            valign: "middle",
            align: 'center',
            field: 'summer',
            title: 'Summer'
        }],
        data: datas,
        onClickCell: itemClick
    });
    $("#table").bootstrapTable('mergeCells', {index: 0, field: 'term', rowspan: 5});
    $("#table").bootstrapTable('mergeCells', {index: 5, field: 'term', rowspan: 5});
    $("#table").bootstrapTable('mergeCells', {index: 10, field: 'term', rowspan: 5});
}

// update table
function updateTalbe(datas) {
    $('#table').bootstrapTable("destroy");
    initTable(datas);
    saveDataToLocal();
}

// store data to local
function saveDataToLocal() {
    storage.setItem("fallList", JSON.stringify(fallList));
    storage.setItem("winterList", JSON.stringify(winterList));
    storage.setItem("springList", JSON.stringify(springList));
    storage.setItem("summerList", JSON.stringify(summerList));
    storage.setItem("isStorage", "1");
    storage.setItem("fallTable", JSON.stringify(fallTable));
    storage.setItem("winterTable", JSON.stringify(winterTable));
    storage.setItem("springTable", JSON.stringify(springTable));
    storage.setItem("summerTable", JSON.stringify(summerTable));

}

// all courses information
function initData() {
    storage.setItem("fallList", JSON.stringify([
         new Class("CMPS 5J (MR)", "Introduction to Programming in Java\nIntroduces programming in Java for students who have no prior programming experience. Students learn programming and documentation skills, as well as algorithmic problem-solving, and programming methodologies. Introduces computers, compilers, and editors. Students write small to medium-sized programs. This course and courses 5C and 5P cover similar concepts, but use different programming languages. Because 5J followed by course 11 is a two-quarter alternative to the accelerated course 12A/L, engineering majors and students planning on continuing the programming sequence are encouraged to take 5J rather than 5C or 5P. Students may not receive credit for 5J taken concurrently or subsequently to course 12A, 12B, or Computer Engineering 13."),
        new Class("CMPS 5P", "Introduction to Programming in Python\nIntroduces programming in Python, a high-level programming language used in the physical and social sciences and for Internet scripting. Students learn programming and documentation skills, as well as algorithmic problem-solving, coding, and debugging methodologies. Students write programs to solve sample problems drawn from a wide range of disciplines, primarily in the sciences. No prior programming experience is required, but a mathematics background at the pre-calculus level is assumed. This course and courses 5C and 5J cover similar concepts, but use different programming languages. Students may not receive credit for course 5P after receiving credit for course 11, 12A, or Computer Engineering 13."),
        new Class("CMPS 11 (MR)", "Intermediate Programming\nContinuation of course 5J. Covers basic object-oriented programming, event-driven programming, graphical user interface (GUI) creation, recursion, two-dimensional arrays. The two-quarter sequence courses 5J and 11 cover in two quarters the same material as the accelerated introductory course and lab 12A/L cover in one quarter. Students cannot receive credit this course and course 12A."),
        new Class("CMPS 12A (MR)", "Introduction to Programming (Accelerated) (subsitude by CMPS5J and CMPS11)\nAccelerated introduction to programming. Students write medium-sized programs. Topics include: functions; conditionals and loops; classes; event-driven programming and graphic user interfaces (GUIs); recursion; and arrays. Students who have no or very limited programming experience should consider courses 5J and 11 which cover the same material in two quarters. Students may not receive credit for both this course and course 11. Some prior programming experience in a language such as C, C++, Java, or C# strongly recommended."),
        new Class("CMPS 12L (MR)", "Computer Programming Laboratory\nLaboratory sequence complementing topics taught in course 12A by providing training and exposure to several software development tools and practices not covered in course 12A. In addition, the lab provides an initial exposure to a second programming language to reinforce concepts from course 12A."),
        new Class("CMPS 12B (MR)", "Introduction to Data Structures\nTeaches students to implement common data structures and the algorithms associated with each data structure, through progressively difficult exercises. Topics include big 'O' notation; pointers, recursion (induction), and dynamic allocation; linked lists and list processing; stacks, queues, binary trees and binary search trees; simple sorting techniques and simple search techniques. Students will gain a working knowledge of the elements of the Java and C programming languages. Prior experience with Unix is assumed."),
        new Class("CMPS 12M (MR)", "Data Structures Laboratory\nComplements course 12B, gaining additional competence with a number of important software development tools, languages, and techniques. Included are advanced Unix features and utilities such as grep, find, diff, the shell, and pipes; C programs utilizing I/O, arrays, pointers, and structures; a scripting language to perform simple text and file manipulation; and the make utility."),
        new Class("CMPS 101 (MR)", "Algorithms and Abstract Data Types\nStudies basic algorithms and their relationships to common abstract data types. Covers the notions of abstract data types and the distinction between an abstract data type and an implementation of that data type. The complexity analysis of common algorithms using asymptotic (big 'O') notation is emphasized. Topics include sorting and searching techniques, basic graph algorithms, and algorithm design techniques. Abstract data types covered include priority queues, dictionaries, disjoint sets, heaps, balanced trees, and hashing. Familiarity with C, Java, and Unix is assumed."),
        new Class("CMPS 102 (MR)", "Introduction to Analysis of Algorithms\nMethods for the systematic construction and mathematical analysis of algorithms. Order notation, the RAM model of computation, lower bounds, and recurrence relations are covered. The algorithm design techniques include divide-and-conquer, branch and bound, and dynamic programming. Applications to combinatorial, graph, string, and geometric algorithms."),
        new Class("CMPS 104A (EL)", "Advanced Programming\nAn introduction to the basic techniques used in compiler design. Topics include compiler structure, symbol tables, regular expressions and languages, finite automata, lexical analysis, context-free languages, LL(1), recursive descent, LALR(1), and LR(1) parsing; and attribute grammars as a model of syntax-directed translation. Students use compiler building tools to construct a working compiler."),
        new Class("CMPS 109 (EL)", "Advanced Programming\nAn introduction to object-oriented techniques of software development including data abstraction, inheritance, polymorphism, and object-oriented design. Extensive practice using a computer to solve problems, including construction of graphical user interfaces and a multithreaded client/server applications."),
        new Class("CMPS 111 (MR)", "Introduction to Operating Systems\nFundamental principles of operating systems: process synchronization, deadlocks, memory management, resource allocation, scheduling, storage systems, and study of several operating systems. A major programming project will be required."),
        new Class("CMPS 112 (MR)", "Comparative Programming Languages\nCovers several programming languages and compares styles, philosophy, and design principles. Principles underlying declarative, functional, and object-oriented programming styles are studied. Students write programs emphasizing each of these techniques."), 
        new Class("CMPS 115 (DC)", " Introduction to Software Engineering\nEmphasizes the characteristics of well-engineered software systems. Topics include requirements analysis and specification, design, programming, verification and validation, maintenance, and project management. Practical and research methods are studied. Imparts an understanding of the steps used to effectively develop computer software. (Formerly Software Methodology.)"),
        new Class("CMPS 121 (EL)", " Mobile Applications\nIntroduces programming and application development for mobile devices. Covers the SDK and main programming platforms available on mobile devices, methodologies for developing native applications, division of computation between the mobile platform and servers, and mobile-to-server communications. Introduces platforms based on JavaScript and HTML5 for the development of applications that are portable across platforms. Students develop components of applications, leading to fully functional applications by the end of the course. Course based on emulators and SDK tools, so ownership of a cellphone/tablet is not required for the course."),
        new Class("CMPS 128 (EL)", " Distributed Systems: File Sharing, Online Gaming, and More\nCovers topics in distributed computing including communication, naming, synchronization, consistency and replication, fault tolerance, and security. Examples drawn from peer-to-peer systems, online gaming, the World Wide Web; other systems also used to illustrate approaches to these topics. Students implement simple distributed systems over the course of the quarter."),
        new Class("CMPS 130 (EL)", "Computational Models\nVarious representations for regular languages, context-free grammars, normal forms, simple parsing, pumping lemmas, Turing machines, the Church-Turing thesis, intractable problems, the P-NP question."),
        //new Class("CMPS 142 (EL)", "Machine Learning and Data Mining"),
        new Class("CMPS 160 (EL)", "Introduction to Computer Graphics\nIntroduces techniques of modeling, transformation, and rendering for computer-generated imagery. Topics: 2D/3D primitives, projections, matrix composition, and shading algorithms. Programming assignments and major project required. Students cannot receive credit for both this course and course 260 in quarters when they are offered concurrently. Mastery of materials in the prerequisite courses will be verified with a quiz or assignment during the first two weeks of the course."),
        new Class("CMPS 160L (EL)", "Introduction to Computer Graphics Laboratory\nComplements course 160, gaining additional competence with a number of important software development tools, graphics libraries, and graphical user interfaces. Topics include OpenGL, WebGL, rubberbanding, picking, sliders, buttons, dialog, event handling, double buffering, lighting, shading, materials, and textures. The topic list may be updated to reflect technological changes."),
        new Class("CMPS 166A (EL)", "Game Theory and Applications I\nIntroduces modern game theory, including applications in social science, biology, and engineering. Topics include extensive form, strategic form, mixed strategies, incomplete information, repeated games, evolutionary games, and simulation techniques."),
        new Class("CMPS 180 (EL)", "Database Systems I\nIntroduction to the concepts, approaches, tools, and methodology of database design. Covers the entity-relationship model, the relational model, relational algebra, relational calculus, commercial languages (such as SQL and QBE), functional dependencies, normal forms, and design theory. Other topics may include knowledge-bases, constraint databases, and alternative database models."),
        //new Class("CMPS 183 (CP)", "Web Applications"),
        new Class("CMPS 185 (DC)", "Technical Writing and Casfasfaommunication in Computer Science\nWriting and communication by computer science professionals to a technical audience. Geared toward students planning to pursue an advanced degree in computer science. Assignments include: cover letter and resume for job application, statement of purpose for graduate school application, algorithm description and analysis, user documentation, proposal preparation, critical analysis of published papers, survey of the literature, term paper, and oral presentations. May be repeated for credit."),

        new Class("AMS 10 (MR)", "Mathematical Methods for Engineers I (subsitude with MATH21)\nApplications-oriented course on complex numbers and linear algebra integrating Matlab as a computational support tool. Introduction to complex algebra. Vectors, bases and transformations, matrix algebra, solutions of linear systems, inverses and determinants, eigenvalues and eigenvectors, and geometric transformations. Students cannot receive credit for this course and for courses 10A or Mathematics 21."),
        new Class("AMS 131 (MR)", "Introduction to Probability Theory (subsitude with CMPE107)\nIntroduction to probability theory and its applications. Combinatorial analysis, axioms of probability and independence, random variables (discrete and continuous), joint probability distributions, properties of expectation, Central Limit Theorem, Law of Large Numbers, Markov chains. Students cannot receive credit for this course and course 203 and Computer Engineering 107."),

        new Class("MATH 19A (MR)", "Calculus for Science, Engineering, and Mathematics\nThe limit of a function, calculating limits, continuity, tangents, velocities, and other instantaneous rates of change. Derivatives, the chain rule, implicit differentiation, higher derivatives. Exponential functions, inverse functions, and their derivatives. The mean value theorem, monotonic functions, concavity, and points of inflection. Applied maximum and minimum problems. Students cannot receive credit for both this course and course 11A or Applied Mathematics and Statistics 11A and 15A,or Economics 11A."),
        new Class("MATH 19B (MR)", "Calculus for Science, Engineering, and Mathematics\nThe definite integral and the fundamental theorem of calculus. Areas, volumes. Integration by parts, trigonometric substitution, and partial fractions methods. Improper integrals. Sequences, series, absolute convergence and convergence tests. Power series, Taylor and Maclaurin series. Students cannot receive credit for both this course and course 11B, Applied Math and Statistics 11B and 15B, or Economics 11B. \nPrerequisite(s): course 19A or 20A or AP Calculus AB exam score of 4 or 5, or BC exam score of 3 or higher, or IB Mathematics Higher Level exam score of 5 of higher. (General Education Code(s): MF.)"),
        new Class("MATH 23A (MR)", "Vector Calculus\nVectors in n-dimensional Euclidean space. The inner and cross products. The derivative of functions from n-dimensional to m-dimensional Euclidean space is studied as a linear transformation having matrix representation. Paths in 3-dimensions, arc length, vector differential calculus, Taylor's theorem in several variables, extrema of real-valued functions, constrained extrema and Lagrange multipliers, the implicit function theorem, some applications. Students cannot receive credit for this course and course 22. (Formerly Multivariable Calculus.)"),
        new Class("MATH 21 (MR)", "Linear Algebra (subsitude with AMS10)\nSystems of linear equations matrices, determinants. Introduces abstract vector spaces, linear transformation, inner products, the geometry of Euclidean space, and eigenvalues. Students cannot receive credit for this course and Applied Mathematics and Statistics 10 or 10A."),


        new Class("CMPE 12 (MR)", "Computer Systems and Assembly Language\nIntroduction to computer systems and assembly language and how computers compute in hardware and software. Topics include digital logic, number systems, data structures, compiling/assembly process, basics of system software, and computer architecture. May include C language. Students with no prior programming experience are strongly recommended to take course 3, Computer Science 5J, Computer Science 5P, Computer Science 10, or equivalent before taking this course.\nPrerequisite(s): previous or concurrent enrollment in course 12L is required. (General Education Code(s): IN, Q.)\nProfessor: Staff"), 
        new Class("CMPE 12L (MR)", "Computer Systems and Assembly Language Laboratory\nIntroduction to computer systems and assembly language and how computers compute in hardware and software. Topics include digital logic, number systems, data structures, compiling/assembly process, basics of system software, and computer architecture. May include C language. Students with no prior programming experience are strongly recommended to take course 3, Computer Science 5J, Computer Science 5P, Computer Science 10, or equivalent before taking this course."),
        new Class("CMPE 16 (MR)", "Applied Discrete Mathematics\nIntroduction to applications of discrete mathematical systems. Topics include sets, functions, relations, graphs, predicate calculus, mathematical proof methods (induction, contraposition, contradiction), counting methods (permutations, combinations), and recurrences. Examples are drawn from computer science and computer engineering. Knowledge of computer programming is useful before taking this course. Students who do not have prior programing experience are strongly recommended to take Computer Science 5C, 5J, or 5P before taking this course.\nPrerequisite(s): Mathematics 19A or 11B or Applied Mathematics and Statistics 11B or 15B or Economics 11B. (General Education Code(s): MF, Q.)\nProfessor: Tracy Larrabee (larrabee)"),
        new Class("CMPE 100 (EL)", "Logic Design\nLaboratory sequence illustrating topics covered in course 100. Two 2-hour laboratory sessions per week. Weekly laboratory assignments which require the use of the oscilloscopes, TTL circuits, computer-aided design and simulation tools, and programmable logic. Students are billed a materials fee."),
        new Class("CMPE 100L (EL)", "Logic Design Laboratory\nLaboratory sequence illustrating topics covered in course 100. Two 2-hour laboratory sessions per week. Weekly laboratory assignments which require the use of the oscilloscopes, TTL circuits, computer-aided design and simulation tools, and programmable logic. Students are billed a materials fee."),
        //new Class("CMPE 107 (MR)", "(subsitude with AMS131)"),
        new Class("CMPE 110 (MR)", "Computer Architecture\nIntroduction to computer architecture including examples of current approaches and the effect of technology and software. Computer performance evaluation, basic combinatorial and sequential digital components, different instruction set architectures with a focus on the MIPS ISA and RISC paradigm. Evolution of CPU microarchitecture from single-cycle to multi-cycle pipelines, with overview of super-scalar, multiple-issue and VLIW. Memory system, cache, virtual memory and relationship between memory and performance. Evolution of PC system architecture. May include advanced topics, such as parallel processing, MIMD, and SIMD."),
                
        new Class("CMPE 118 (EL)", "Introduction to Mechatronics\nTechnologies involved in mechatronics (intelligent electro-mechanical systems) and techniques necessary to integrate these technologies into mechatronic systems. Topics include electronics (A/D, D/A converters, opamps, filters, power devices), software program design (event-driven programming, state machine-based design), DC and stepper motors, basic sensing, and basic mechanical design (machine elements and mechanical CAD). Combines lab component of structured assignments with a large and open-ended team project. Cannot receive credit for this course and course 218."),
        new Class("CMPE 118L (EL)", "Introduction to Mechatronics Laboratory\nLaboratory sequence illustrating topics covered in course 118. Two 2-hour laboratory sessions per week. Students cannot receive credit for this course and course 218L. Students are billed a materials fee."),
        new Class("CMPE 121 (EL)", "Microprocessor System Design\nPrerequisite(s): courses 12/L and 100/L and Electrical Engineering 101/L; and course 13/L or Computer Science 12B/M. Concurrent enrollment in course 121L required."),
        new Class("CMPE 121L (EL)", "Microprocessor System Design Laboratory\nLaboratory sequence illustrating topics covered in course 121. Two 2-hour laboratory sessions per week. Students design, build, program, debug, document, and demonstrate a microprocessor-based system. Students are billed a materials fee."),
        new Class("CMPE 129A (EL)", "Capstone Project I\nFirst of a three-course sequence in which students apply knowledge and skills gained in elective track to complete a major design project. In this first course, students complete the specification and planning for a substantial project. Topics covered: engineering design cycle, engineering teams, and professional practices."),
        new Class("CMPE 141 (EL)", "Feedback Control Systems\nAnalysis and design of continuous linear feedback control systems. Essential principles and advantages of feedback. Design by root locus, frequency response, and state space methods and comparisons of these techniques. Applications."),
        //new Class("CMPE 149 (EL)", "Introduction to Cyber-physical Systems"),
        new Class("CMPE 150 (EL)", "Introduction to Computer Networks\nAddresses issues arising in organizing communications among autonomous computers. Network models and conceptual layers; Internet-working; characteristics of transmission media; switching techniques (packet switching, circuit switching, cell switching); medium access control (MAC) protocols and local area networks; error-control strategies and link-level protocols; routing algorithms for bridges and routers; congestion control mechanisms; transport protocols; application of concepts to practical wireless and wireline networks and standard protocol architectures. Students who have completed course 80N can take this course for credit."),
        new Class("CMPE 150L (EL)", "Introduction to Computer Networks Laboratory\nIllustrates the concepts covered in course 150 and provides students with hands-on experience in computer networks. Students are billed a materials fee."),
        new Class("CMPE 153 (EL)", "Digital Signal Processing\nIntroduction to the principles of signal processing, including discrete-time signals and systems, the z-transform, sampling of continuous-time signals, transform analysis of linear time-invariant systems, structures for discrete-time systems, the discrete Fourier transform, computation of the discrete Fourier transform, and filter design techniques. Taught in conjunction with Electrical Engineering 250. Students cannot receive credit for this course and Electrical Engineering 250."),
        new Class("CMPE 185 (CP)", "Technical Writing for Computer Engineers\nWriting by engineers and computer scientists, not to general audiences, but to engineers, engineering managers, and technical writers. Exercises include job application and resume, in-code documentation, algorithm description, naive-user documentation, library puzzle, survey article, proposal, progress report, formal technical report, and oral presentation. Offered in alternate quarters. Enrollment restricted to majors in Computer Engineering, Electrical Engineering, Bioengineering, Bioinformatics, Robotics Engineering, or Network and Digital Technology, or by permission of instructor."),
    ]));
    storage.setItem("winterList", JSON.stringify([
        new Class("CMPS 5J (MR)", "Introduction to Programming in Java\nIntroduces programming in Java for students who have no prior programming experience. Students learn programming and documentation skills, as well as algorithmic problem-solving, and programming methodologies. Introduces computers, compilers, and editors. Students write small to medium-sized programs. This course and courses 5C and 5P cover similar concepts, but use different programming languages. Because 5J followed by course 11 is a two-quarter alternative to the accelerated course 12A/L, engineering majors and students planning on continuing the programming sequence are encouraged to take 5J rather than 5C or 5P. Students may not receive credit for 5J taken concurrently or subsequently to course 12A, 12B, or Computer Engineering 13."),
        //new Class("CMPS 5P", "Introduction to Programming in Python\nIntroduces programming in Python, a high-level programming language used in the physical and social sciences and for Internet scripting. Students learn programming and documentation skills, as well as algorithmic problem-solving, coding, and debugging methodologies. Students write programs to solve sample problems drawn from a wide range of disciplines, primarily in the sciences. No prior programming experience is required, but a mathematics background at the pre-calculus level is assumed. This course and courses 5C and 5J cover similar concepts, but use different programming languages. Students may not receive credit for course 5P after receiving credit for course 11, 12A, or Computer Engineering 13."),
        new Class("CMPS 11 (MR)", "Intermediate Programming\nContinuation of course 5J. Covers basic object-oriented programming, event-driven programming, graphical user interface (GUI) creation, recursion, two-dimensional arrays. The two-quarter sequence courses 5J and 11 cover in two quarters the same material as the accelerated introductory course and lab 12A/L cover in one quarter. Students cannot receive credit this course and course 12A."),
        new Class("CMPS 12A (MR)", "Introduction to Programming (Accelerated) (subsitude by CMPS5J and CMPS11)\nAccelerated introduction to programming. Students write medium-sized programs. Topics include: functions; conditionals and loops; classes; event-driven programming and graphic user interfaces (GUIs); recursion; and arrays. Students who have no or very limited programming experience should consider courses 5J and 11 which cover the same material in two quarters. Students may not receive credit for both this course and course 11. Some prior programming experience in a language such as C, C++, Java, or C# strongly recommended."),
        new Class("CMPS 12L (MR)", "Computer Programming Laboratory\nLaboratory sequence complementing topics taught in course 12A by providing training and exposure to several software development tools and practices not covered in course 12A. In addition, the lab provides an initial exposure to a second programming language to reinforce concepts from course 12A."),
        new Class("CMPS 12B (MR)", "Introduction to Data Structures\nTeaches students to implement common data structures and the algorithms associated with each data structure, through progressively difficult exercises. Topics include big 'O' notation; pointers, recursion (induction), and dynamic allocation; linked lists and list processing; stacks, queues, binary trees and binary search trees; simple sorting techniques and simple search techniques. Students will gain a working knowledge of the elements of the Java and C programming languages. Prior experience with Unix is assumed."),
        new Class("CMPS 12M (MR)", "Data Structures Laboratory\nComplements course 12B, gaining additional competence with a number of important software development tools, languages, and techniques. Included are advanced Unix features and utilities such as grep, find, diff, the shell, and pipes; C programs utilizing I/O, arrays, pointers, and structures; a scripting language to perform simple text and file manipulation; and the make utility."),
        new Class("CMPS 101 (MR)", "Algorithms and Abstract Data Types\nStudies basic algorithms and their relationships to common abstract data types. Covers the notions of abstract data types and the distinction between an abstract data type and an implementation of that data type. The complexity analysis of common algorithms using asymptotic (big 'O') notation is emphasized. Topics include sorting and searching techniques, basic graph algorithms, and algorithm design techniques. Abstract data types covered include priority queues, dictionaries, disjoint sets, heaps, balanced trees, and hashing. Familiarity with C, Java, and Unix is assumed."),
        new Class("CMPS 102 (MR)", "Introduction to Analysis of Algorithms\nMethods for the systematic construction and mathematical analysis of algorithms. Order notation, the RAM model of computation, lower bounds, and recurrence relations are covered. The algorithm design techniques include divide-and-conquer, branch and bound, and dynamic programming. Applications to combinatorial, graph, string, and geometric algorithms."),
        //new Class("CMPS 104A (EL)", "Advanced Programming\nAn introduction to the basic techniques used in compiler design. Topics include compiler structure, symbol tables, regular expressions and languages, finite automata, lexical analysis, context-free languages, LL(1), recursive descent, LALR(1), and LR(1) parsing; and attribute grammars as a model of syntax-directed translation. Students use compiler building tools to construct a working compiler."),
        new Class("CMPS 109 (EL)", "Advanced Programming\nAn introduction to object-oriented techniques of software development including data abstraction, inheritance, polymorphism, and object-oriented design. Extensive practice using a computer to solve problems, including construction of graphical user interfaces and a multithreaded client/server applications."),
        new Class("CMPS 111 (MR)", "Introduction to Operating Systems\nFundamental principles of operating systems: process synchronization, deadlocks, memory management, resource allocation, scheduling, storage systems, and study of several operating systems. A major programming project will be required."),
        new Class("CMPS 112 (MR)", "Comparative Programming Languages\nCovers several programming languages and compares styles, philosophy, and design principles. Principles underlying declarative, functional, and object-oriented programming styles are studied. Students write programs emphasizing each of these techniques."), 
        new Class("CMPS 115 (DC)", " Introduction to Software Engineering\nEmphasizes the characteristics of well-engineered software systems. Topics include requirements analysis and specification, design, programming, verification and validation, maintenance, and project management. Practical and research methods are studied. Imparts an understanding of the steps used to effectively develop computer software. (Formerly Software Methodology.)"),
        new Class("CMPS 116(EL)","Software Design Project\nStudents in teams specify, design, construct, test, and document a complete software system in a specialized application domain. Class time is spent in technical discussions and ongoing design reviews. A formal presentation and demonstration of each project is required. An organizational meeting will be held during the preceding quarter. Projects may be drawn from industry and campus research groups."),
        new Class("CMPS119(EL)", "Software for Society\nProvides experience with applying computing to social issues. Case studies on multiple issues. For example: privacy, copyright, voting, education, poverty, energy, activism. Team project in which students develop software to address a pre-identified need of a global or local non-profit."),
        //new Class("CMPS 121 (EL)", " Mobile Applications\nIntroduces programming and application development for mobile devices. Covers the SDK and main programming platforms available on mobile devices, methodologies for developing native applications, division of computation between the mobile platform and servers, and mobile-to-server communications. Introduces platforms based on JavaScript and HTML5 for the development of applications that are portable across platforms. Students develop components of applications, leading to fully functional applications by the end of the course. Course based on emulators and SDK tools, so ownership of a cellphone/tablet is not required for the course."),
        new Class("CMPS122 (EL)", "Computer Security\nIntroduction to computer security (including selected topics in network security). Access control. Security in programming languages. Basic cryptography. Security protocols."),
        new Class("CMPS 128 (EL)", " Distributed Systems: File Sharing, Online Gaming, and More\nCovers topics in distributed computing including communication, naming, synchronization, consistency and replication, fault tolerance, and security. Examples drawn from peer-to-peer systems, online gaming, the World Wide Web; other systems also used to illustrate approaches to these topics. Students implement simple distributed systems over the course of the quarter."),
        new Class("CMPS 130 (EL)", "Computational Models\nVarious representations for regular languages, context-free grammars, normal forms, simple parsing, pumping lemmas, Turing machines, the Church-Turing thesis, intractable problems, the P-NP question."),
        new Class("CMPS140 (EL)", "Artificial Intelligence\nIntroduction to the contemporary concepts and techniques of artificial intelligence, including any or all of: machine perception and inference, machine learning, optimization problems, computational methods and models of search, game playing and theorem proving. Emphasis may be on any formal method of perceiving, learning, reasoning, and problem solving which proves to be effective. This includes both symbolic and neural network approaches to artificial intelligence. Issues discussed include symbolic versus nonsymbolic methods, local versus global methods, hierarchical organization and control, and brain modeling versus engineering approaches. Lisp or Prolog may be introduced. Involves one major project or regular programming assignments."),
        //new Class("CMPS 142 (EL)", "Machine Learning and Data Mining"),
        //new Class("CMPS 160 (EL)", "Introduction to Computer Graphics\nIntroduces techniques of modeling, transformation, and rendering for computer-generated imagery. Topics: 2D/3D primitives, projections, matrix composition, and shading algorithms. Programming assignments and major project required. Students cannot receive credit for both this course and course 260 in quarters when they are offered concurrently. Mastery of materials in the prerequisite courses will be verified with a quiz or assignment during the first two weeks of the course."),
        //new Class("CMPS 160L (EL)", "Introduction to Computer Graphics Laboratory\nComplements course 160, gaining additional competence with a number of important software development tools, graphics libraries, and graphical user interfaces. Topics include OpenGL, WebGL, rubberbanding, picking, sliders, buttons, dialog, event handling, double buffering, lighting, shading, materials, and textures. The topic list may be updated to reflect technological changes."),
        //new Class("CMPS 166A (EL)", "Game Theory and Applications I\nIntroduces modern game theory, including applications in social science, biology, and engineering. Topics include extensive form, strategic form, mixed strategies, incomplete information, repeated games, evolutionary games, and simulation techniques."),
        new Class("CMPS 180 (EL)", "Database Systems I\nIntroduction to the concepts, approaches, tools, and methodology of database design. Covers the entity-relationship model, the relational model, relational algebra, relational calculus, commercial languages (such as SQL and QBE), functional dependencies, normal forms, and design theory. Other topics may include knowledge-bases, constraint databases, and alternative database models."),
        new Class("CMPS 183 (CP)", "Web Applications\nThe World-Wde Web is one of the main mechanisms by which computer applications are delivered to users. This course introduces the design of Web applications. Students learn the main technologies involved, and build web applications as part of homework assignments and group class projects.(Formerly Hypermedia and the Web.)"),
        new Class("CMPS 185 (DC)", "Technical Writing and Casfasfaommunication in Computer Science\nWriting and communication by computer science professionals to a technical audience. Geared toward students planning to pursue an advanced degree in computer science. Assignments include: cover letter and resume for job application, statement of purpose for graduate school application, algorithm description and analysis, user documentation, proposal preparation, critical analysis of published papers, survey of the literature, term paper, and oral presentations. May be repeated for credit."),

        new Class("AMS 10 (MR)", "Mathematical Methods for Engineers I (subsitude with MATH21)\nApplications-oriented course on complex numbers and linear algebra integrating Matlab as a computational support tool. Introduction to complex algebra. Vectors, bases and transformations, matrix algebra, solutions of linear systems, inverses and determinants, eigenvalues and eigenvectors, and geometric transformations. Students cannot receive credit for this course and for courses 10A or Mathematics 21."),
        new Class("AMS 131 (MR)", "Introduction to Probability Theory (subsitude with CMPE107)\nIntroduction to probability theory and its applications. Combinatorial analysis, axioms of probability and independence, random variables (discrete and continuous), joint probability distributions, properties of expectation, Central Limit Theorem, Law of Large Numbers, Markov chains. Students cannot receive credit for this course and course 203 and Computer Engineering 107."),

        new Class("MATH 19A (MR)", "Calculus for Science, Engineering, and Mathematics\nThe limit of a function, calculating limits, continuity, tangents, velocities, and other instantaneous rates of change. Derivatives, the chain rule, implicit differentiation, higher derivatives. Exponential functions, inverse functions, and their derivatives. The mean value theorem, monotonic functions, concavity, and points of inflection. Applied maximum and minimum problems. Students cannot receive credit for both this course and course 11A or Applied Mathematics and Statistics 11A and 15A,or Economics 11A."),
        new Class("MATH 19B (MR)", "Calculus for Science, Engineering, and Mathematics\nThe definite integral and the fundamental theorem of calculus. Areas, volumes. Integration by parts, trigonometric substitution, and partial fractions methods. Improper integrals. Sequences, series, absolute convergence and convergence tests. Power series, Taylor and Maclaurin series. Students cannot receive credit for both this course and course 11B, Applied Math and Statistics 11B and 15B, or Economics 11B. \nPrerequisite(s): course 19A or 20A or AP Calculus AB exam score of 4 or 5, or BC exam score of 3 or higher, or IB Mathematics Higher Level exam score of 5 of higher. (General Education Code(s): MF.)"),
        new Class("MATH 23A (MR)", "Vector Calculus\nVectors in n-dimensional Euclidean space. The inner and cross products. The derivative of functions from n-dimensional to m-dimensional Euclidean space is studied as a linear transformation having matrix representation. Paths in 3-dimensions, arc length, vector differential calculus, Taylor's theorem in several variables, extrema of real-valued functions, constrained extrema and Lagrange multipliers, the implicit function theorem, some applications. Students cannot receive credit for this course and course 22. (Formerly Multivariable Calculus.)"),
        new Class("MATH 21 (MR)", "Linear Algebra (subsitude with AMS10)\nSystems of linear equations matrices, determinants. Introduces abstract vector spaces, linear transformation, inner products, the geometry of Euclidean space, and eigenvalues. Students cannot receive credit for this course and Applied Mathematics and Statistics 10 or 10A."),


        new Class("CMPE 12 (MR)", "Computer Systems and Assembly Language\nIntroduction to computer systems and assembly language and how computers compute in hardware and software. Topics include digital logic, number systems, data structures, compiling/assembly process, basics of system software, and computer architecture. May include C language. Students with no prior programming experience are strongly recommended to take course 3, Computer Science 5J, Computer Science 5P, Computer Science 10, or equivalent before taking this course.\nPrerequisite(s): previous or concurrent enrollment in course 12L is required. (General Education Code(s): IN, Q.)\nProfessor: Staff"), 
        new Class("CMPE 12L (MR)", "Computer Systems and Assembly Language Laboratory\nIntroduction to computer systems and assembly language and how computers compute in hardware and software. Topics include digital logic, number systems, data structures, compiling/assembly process, basics of system software, and computer architecture. May include C language. Students with no prior programming experience are strongly recommended to take course 3, Computer Science 5J, Computer Science 5P, Computer Science 10, or equivalent before taking this course."),
        new Class("CMPE 16 (MR)", "Applied Discrete Mathematics\nIntroduction to applications of discrete mathematical systems. Topics include sets, functions, relations, graphs, predicate calculus, mathematical proof methods (induction, contraposition, contradiction), counting methods (permutations, combinations), and recurrences. Examples are drawn from computer science and computer engineering. Knowledge of computer programming is useful before taking this course. Students who do not have prior programing experience are strongly recommended to take Computer Science 5C, 5J, or 5P before taking this course.\nPrerequisite(s): Mathematics 19A or 11B or Applied Mathematics and Statistics 11B or 15B or Economics 11B. (General Education Code(s): MF, Q.)\nProfessor: Tracy Larrabee (larrabee)"),
        new Class("CMPE 100 (EL)", "Logic Design\nLaboratory sequence illustrating topics covered in course 100. Two 2-hour laboratory sessions per week. Weekly laboratory assignments which require the use of the oscilloscopes, TTL circuits, computer-aided design and simulation tools, and programmable logic. Students are billed a materials fee."),
        new Class("CMPE 100L (EL)", "Logic Design Laboratory\nLaboratory sequence illustrating topics covered in course 100. Two 2-hour laboratory sessions per week. Weekly laboratory assignments which require the use of the oscilloscopes, TTL circuits, computer-aided design and simulation tools, and programmable logic. Students are billed a materials fee."),
        new Class("CMPE 107 (MR)", "Probability and Statistics for Engineers (subsitude with AMS131)\nIntroduction to fundamental tools of stochastic analysis. Probability, conditional probability; Bayes Theorem; random variables and transforms; independence; Bernnoulli trials. Statistics, inference from limited data; outcomes of repeated experiments; applications to design; assessment of relative frequency and probability; law of large numbers; precision of measurements. Elements of stochastic processes, Poisson processes; Markov chains. Students cannot receive credit for this course and Applied Mathematics and Statistics 131. (Formerly Mathematical Methods of Systems Analysis: Stochastic.)"),
        new Class("CMPE 110 (MR)", "Computer Architecture\nIntroduction to computer architecture including examples of current approaches and the effect of technology and software. Computer performance evaluation, basic combinatorial and sequential digital components, different instruction set architectures with a focus on the MIPS ISA and RISC paradigm. Evolution of CPU microarchitecture from single-cycle to multi-cycle pipelines, with overview of super-scalar, multiple-issue and VLIW. Memory system, cache, virtual memory and relationship between memory and performance. Evolution of PC system architecture. May include advanced topics, such as parallel processing, MIMD, and SIMD."),
        //new Class("CMPE 118 (EL)", "Introduction to Mechatronics\nTechnologies involved in mechatronics (intelligent electro-mechanical systems) and techniques necessary to integrate these technologies into mechatronic systems. Topics include electronics (A/D, D/A converters, opamps, filters, power devices), software program design (event-driven programming, state machine-based design), DC and stepper motors, basic sensing, and basic mechanical design (machine elements and mechanical CAD). Combines lab component of structured assignments with a large and open-ended team project. Cannot receive credit for this course and course 218."),
        //new Class("CMPE 118L (EL)", "Introduction to Mechatronics Laboratory\nLaboratory sequence illustrating topics covered in course 118. Two 2-hour laboratory sessions per week. Students cannot receive credit for this course and course 218L. Students are billed a materials fee."),
        //new Class("CMPE 121 (EL)", "Microprocessor System Design\nPrerequisite(s): courses 12/L and 100/L and Electrical Engineering 101/L; and course 13/L or Computer Science 12B/M. Concurrent enrollment in course 121L required."),
        //new Class("CMPE 121L (EL)", "Microprocessor System Design Laboratory\nLaboratory sequence illustrating topics covered in course 121. Two 2-hour laboratory sessions per week. Students design, build, program, debug, document, and demonstrate a microprocessor-based system. Students are billed a materials fee."),
        new Class("CMPE 122 (EL)", "Introduction to VLSI Digital System Design\nIntroduces very large scale integrated (VLSI) custom integrated circuits. Topics include: semiconductor manufacturing, logic families, field-effect transistors (FETs), interconnect models, simulation, and circuits. Introduces the design flow from logic design to layout with a focus on high performance and low power. Students cannot receive credit for this course and course 222."),
        new Class("CMPE 123A (EL)", "Engineering Design Project I\nFirst of a two-course sequence that is the culmination of the engineering program. Students apply knowledge and skills gained in elective track to complete a major design project. Students complete research, specification, planning, and procurement for a substantial project. Includes technical discussions, design reviews, and formal presentations; engineering design cycle, engineering teams, and professional practices. Formal technical specification of the approved project is presented to faculty. Students are billed a materials fee. Prerequisite(s): Computer Engineering 121; previous or concurrent enrollment in Computer Engineering 185; permission of department and instructor."),
        //new Class("CMPE 129A (EL)", "Capstone Project I\nFirst of a three-course sequence in which students apply knowledge and skills gained in elective track to complete a major design project. In this first course, students complete the specification and planning for a substantial project. Topics covered: engineering design cycle, engineering teams, and professional practices."),
        new Class("CMPE 129B", "Capstone Project II\nSecond of a three-course sequence in which students apply knowledge and skills gained in elective track to complete a major design project. In this second course, students complete the research and procurement for a substantial project and a preliminary implementation. Students are billed a materials fee. Prerequisite(s): courses 121, 121L, and 129A. Previous or concurrent enrollment in course 185. Enrollment by permission of instructor."),
        //new Class("CMPE 141 (EL)", "Feedback Control Systems\nAnalysis and design of continuous linear feedback control systems. Essential principles and advantages of feedback. Design by root locus, frequency response, and state space methods and comparisons of these techniques. Applications."),
        //new Class("CMPE 149 (EL)", "Introduction to Cyber-physical Systems"),
        new Class("CMPE 150 (EL)", "Introduction to Computer Networks\nAddresses issues arising in organizing communications among autonomous computers. Network models and conceptual layers; Internet-working; characteristics of transmission media; switching techniques (packet switching, circuit switching, cell switching); medium access control (MAC) protocols and local area networks; error-control strategies and link-level protocols; routing algorithms for bridges and routers; congestion control mechanisms; transport protocols; application of concepts to practical wireless and wireline networks and standard protocol architectures. Students who have completed course 80N can take this course for credit."),
        new Class("CMPE 150L (EL)", "Introduction to Computer Networks Laboratory\nIllustrates the concepts covered in course 150 and provides students with hands-on experience in computer networks. Students are billed a materials fee."),
        //new Class("CMPE 153 (EL)", "Digital Signal Processing\nIntroduction to the principles of signal processing, including discrete-time signals and systems, the z-transform, sampling of continuous-time signals, transform analysis of linear time-invariant systems, structures for discrete-time systems, the discrete Fourier transform, computation of the discrete Fourier transform, and filter design techniques. Taught in conjunction with Electrical Engineering 250. Students cannot receive credit for this course and Electrical Engineering 250."),
        new Class("CMPE 156 (EL)", "Network Programming\nMethods and tools used for network programming. Topics include: operating system (OS) support for network protocols; inter-process communication (IPC) facilities, such as pipes, sockets, and remote procedure call (RPC); design of client and server sides of network applications; network security; and programming projects."),
        new Class("CMPE 156L (EL)", "Network Programming Laboratory\nLaboratory sequence illustrating concepts taught in course 156. Students learn use of network programming tools and methods via programming exercises. Students are billed a materials fee."),
        new Class("CMPE 167 (EL)", "Sensing and Sensor Technologies\nIntroduces fundamental issues in sensing of temperature, motion, sound, light, position, etc. Sensors are integrated into a digital system using filtering, amplification, and analog-to-digital conversion. Advanced topics may include noise, temperature, and other sources of variability."),
        new Class("CMPE 167L (EL)", "Sensing and Sensor Technologies Lab\nIntroduces fundamental issues in sensing of temperature, motion, sound, light, position, etc. Sensors are integrated into a digital system using filtering, amplification, and analog-to-digital conversion. Advanced topics may include noise, temperature, and other sources of variability."),
        new Class("CMPE 185 (CP)", "Technical Writing for Computer Engineers\nWriting by engineers and computer scientists, not to general audiences, but to engineers, engineering managers, and technical writers. Exercises include job application and resume, in-code documentation, algorithm description, naive-user documentation, library puzzle, survey article, proposal, progress report, formal technical report, and oral presentation. Offered in alternate quarters. Enrollment restricted to majors in Computer Engineering, Electrical Engineering, Bioengineering, Bioinformatics, Robotics Engineering, or Network and Digital Technology, or by permission of instructor."),

    ]));
    storage.setItem("springList", JSON.stringify([
        new Class("CMPS 5J (MR)",  "Introduction to Programming in Java\nIntroduces programming in Java for students who have no prior programming experience. Students learn programming and documentation skills, as well as algorithmic problem-solving, and programming methodologies. Introduces computers, compilers, and editors. Students write small to medium-sized programs. This course and courses 5C and 5P cover similar concepts, but use different programming languages. Because 5J followed by course 11 is a two-quarter alternative to the accelerated course 12A/L, engineering majors and students planning on continuing the programming sequence are encouraged to take 5J rather than 5C or 5P. Students may not receive credit for 5J taken concurrently or subsequently to course 12A, 12B, or Computer Engineering 13."),
        //new Class("CMPS 5P", "Introduction to Programming in Python\nIntroduces programming in Python, a high-level programming language used in the physical and social sciences and for Internet scripting. Students learn programming and documentation skills, as well as algorithmic problem-solving, coding, and debugging methodologies. Students write programs to solve sample problems drawn from a wide range of disciplines, primarily in the sciences. No prior programming experience is required, but a mathematics background at the pre-calculus level is assumed. This course and courses 5C and 5J cover similar concepts, but use different programming languages. Students may not receive credit for course 5P after receiving credit for course 11, 12A, or Computer Engineering 13."),
        new Class("CMPS 11 (MR)",   "Intermediate Programming\nContinuation of course 5J. Covers basic object-oriented programming, event-driven programming, graphical user interface (GUI) creation, recursion, two-dimensional arrays. The two-quarter sequence courses 5J and 11 cover in two quarters the same material as the accelerated introductory course and lab 12A/L cover in one quarter. Students cannot receive credit this course and course 12A."),
        new Class("CMPS 12A (MR)",  "Introduction to Programming (Accelerated) (subsitude by CMPS5J and CMPS11)\nAccelerated introduction to programming. Students write medium-sized programs. Topics include: functions; conditionals and loops; classes; event-driven programming and graphic user interfaces (GUIs); recursion; and arrays. Students who have no or very limited programming experience should consider courses 5J and 11 which cover the same material in two quarters. Students may not receive credit for both this course and course 11. Some prior programming experience in a language such as C, C++, Java, or C# strongly recommended."),
        new Class("CMPS 12L (MR)",  "Computer Programming Laboratory\nLaboratory sequence complementing topics taught in course 12A by providing training and exposure to several software development tools and practices not covered in course 12A. In addition, the lab provides an initial exposure to a second programming language to reinforce concepts from course 12A."),
        new Class("CMPS 12B (MR)",  "Introduction to Data Structures\nTeaches students to implement common data structures and the algorithms associated with each data structure, through progressively difficult exercises. Topics include big 'O' notation; pointers, recursion (induction), and dynamic allocation; linked lists and list processing; stacks, queues, binary trees and binary search trees; simple sorting techniques and simple search techniques. Students will gain a working knowledge of the elements of the Java and C programming languages. Prior experience with Unix is assumed."),
        new Class("CMPS 12M (MR)",  "Data Structures Laboratory\nComplements course 12B, gaining additional competence with a number of important software development tools, languages, and techniques. Included are advanced Unix features and utilities such as grep, find, diff, the shell, and pipes; C programs utilizing I/O, arrays, pointers, and structures; a scripting language to perform simple text and file manipulation; and the make utility."),
        new Class("CMPS 101 (MR)",  "Algorithms and Abstract Data Types\nStudies basic algorithms and their relationships to common abstract data types. Covers the notions of abstract data types and the distinction between an abstract data type and an implementation of that data type. The complexity analysis of common algorithms using asymptotic (big 'O') notation is emphasized. Topics include sorting and searching techniques, basic graph algorithms, and algorithm design techniques. Abstract data types covered include priority queues, dictionaries, disjoint sets, heaps, balanced trees, and hashing. Familiarity with C, Java, and Unix is assumed."),
        new Class("CMPS 102 (MR)",  "Introduction to Analysis of Algorithms\nMethods for the systematic construction and mathematical analysis of algorithms. Order notation, the RAM model of computation, lower bounds, and recurrence relations are covered. The algorithm design techniques include divide-and-conquer, branch and bound, and dynamic programming. Applications to combinatorial, graph, string, and geometric algorithms."),
        new Class("CMPS 104A (EL)", "Advanced Programming\nAn introduction to the basic techniques used in compiler design. Topics include compiler structure, symbol tables, regular expressions and languages, finite automata, lexical analysis, context-free languages, LL(1), recursive descent, LALR(1), and LR(1) parsing; and attribute grammars as a model of syntax-directed translation. Students use compiler building tools to construct a working compiler."),
        new Class("CMPS 109 (EL)",  "Advanced Programming\nAn introduction to object-oriented techniques of software development including data abstraction, inheritance, polymorphism, and object-oriented design. Extensive practice using a computer to solve problems, including construction of graphical user interfaces and a multithreaded client/server applications."),
        new Class("CMPS 111 (MR)",  "Introduction to Operating Systems\nFundamental principles of operating systems: process synchronization, deadlocks, memory management, resource allocation, scheduling, storage systems, and study of several operating systems. A major programming project will be required."),
        new Class("CMPS 112 (MR)",  "Comparative Programming Languages\nCovers several programming languages and compares styles, philosophy, and design principles. Principles underlying declarative, functional, and object-oriented programming styles are studied. Students write programs emphasizing each of these techniques."), 
        new Class("CMPS 115 (DC)",  "Introduction to Software Engineering\nEmphasizes the characteristics of well-engineered software systems. Topics include requirements analysis and specification, design, programming, verification and validation, maintenance, and project management. Practical and research methods are studied. Imparts an understanding of the steps used to effectively develop computer software. (Formerly Software Methodology.)"),
        new Class("CMPS 116 (EL)",  "Software Design Project\nStudents in teams specify, design, construct, test, and document a complete software system in a specialized application domain. Class time is spent in technical discussions and ongoing design reviews. A formal presentation and demonstration of each project is required. An organizational meeting will be held during the preceding quarter. Projects may be drawn from industry and campus research groups."),
        new Class("CMPS 117 (CP)",  "Software Design Project II\nContinuation of course 116. Students work in teams to develop, test, document, and deploy a substantial software project. Teams give a formal presentation and demonstration of each project."),
        //new Class("CMPS119(EL)", "Software for Society\nProvides experience with applying computing to social issues. Case studies on multiple issues. For example: privacy, copyright, voting, education, poverty, energy, activism. Team project in which students develop software to address a pre-identified need of a global or local non-profit."),
        new Class("CMPS 121 (EL)",  "Mobile Applications\nIntroduces programming and application development for mobile devices. Covers the SDK and main programming platforms available on mobile devices, methodologies for developing native applications, division of computation between the mobile platform and servers, and mobile-to-server communications. Introduces platforms based on JavaScript and HTML5 for the development of applications that are portable across platforms. Students develop components of applications, leading to fully functional applications by the end of the course. Course based on emulators and SDK tools, so ownership of a cellphone/tablet is not required for the course."),
        //new Class("CMPS122 (EL)", "Computer Security\nIntroduction to computer security (including selected topics in network security). Access control. Security in programming languages. Basic cryptography. Security protocols."),
        //new Class("CMPS 128 (EL)", " Distributed Systems: File Sharing, Online Gaming, and More\nCovers topics in distributed computing including communication, naming, synchronization, consistency and replication, fault tolerance, and security. Examples drawn from peer-to-peer systems, online gaming, the World Wide Web; other systems also used to illustrate approaches to these topics. Students implement simple distributed systems over the course of the quarter."),
        new Class("CMPS 130 (EL)",  "Computational Models\nVarious representations for regular languages, context-free grammars, normal forms, simple parsing, pumping lemmas, Turing machines, the Church-Turing thesis, intractable problems, the P-NP question."),
        new Class("CMPS 132 (EL)",  "Computability and Computational Complexity\nTuring machines, general phase-structure grammars, the Chomsky hierarchy, recursive functions, diagonalization, the Halting problem, computability and unsolvability, computational complexity, time and space bounds, NP-completeness with emphasis on reductions between problems from various areas."),
        new Class("CMPS 132W (DC)", "Computability and Computational Complexity\nDisciplinary Communication (DC) course to be taken concurrently with course 132. Students satisfy the DC requirement by writing a survey paper on a topic related to computability and computational complexity. Possible topics include: an overview of a different model of computation (e.g., quantum computing); an overview of a major complexity class; a critical analysis of the Church-Turing thesis. Prerequisite(s): course 130; satisfaction of the Entry Level Writing and Composition requirements.Concurrent enrollment in course 132 required. Enrollment by permission of instructor."),
        new Class("CMPS140 (EL)",   "Artificial Intelligence\nIntroduction to the contemporary concepts and techniques of artificial intelligence, including any or all of: machine perception and inference, machine learning, optimization problems, computational methods and models of search, game playing and theorem proving. Emphasis may be on any formal method of perceiving, learning, reasoning, and problem solving which proves to be effective. This includes both symbolic and neural network approaches to artificial intelligence. Issues discussed include symbolic versus nonsymbolic methods, local versus global methods, hierarchical organization and control, and brain modeling versus engineering approaches. Lisp or Prolog may be introduced. Involves one major project or regular programming assignments."),
        new Class("CMPS 142 (EL)",  "Machine Learning\nIntroduction to machine learning algorithms and their applications. Topics include classification learning, density estimation and Bayesian learning regression, and online learning. Provides introduction to standard learning methods such as neural networks, decision trees, boosting, and nearest neighbor techniques."),
        new Class("CMPS 143 (EL)",  "Introduction to Natural Language Processing\nIntroduces the theory and practice of natural language processing (NLP)-- the creation of computer programs that can understand, generate, and learn natural language. Introduces the three major subfields of NLP: syntax (the structure of a sentence); semantics (the explicit meaning of a single sentence); and pragmatics (the implicit meaning of a sentence when it is used in a specific discourse). Projects focus on the techniques useful for a particular application area, alternating in different years. Project application areas include information extraction, narrative understanding, sentiment analysis, dialogue systems, and question answering."),
        new Class("CMPS 160 (EL)",  "Introduction to Computer Graphics\nIntroduces techniques of modeling, transformation, and rendering for computer-generated imagery. Topics: 2D/3D primitives, projections, matrix composition, and shading algorithms. Programming assignments and major project required. Students cannot receive credit for both this course and course 260 in quarters when they are offered concurrently. Mastery of materials in the prerequisite courses will be verified with a quiz or assignment during the first two weeks of the course."),
        //new Class("CMPS 160L (EL)", "Introduction to Computer Graphics Laboratory\nComplements course 160, gaining additional competence with a number of important software development tools, graphics libraries, and graphical user interfaces. Topics include OpenGL, WebGL, rubberbanding, picking, sliders, buttons, dialog, event handling, double buffering, lighting, shading, materials, and textures. The topic list may be updated to reflect technological changes."),
        new Class("CMPS 165 (CP)",  "Data Programming for Visualization\nPresents the basics of open-source programming tools to perform data analysis and create interactive visualizations and maps for the web, data integrity and scraping, statistical computation, simple and novel visualizations, and geomapping. The examples are drawn from social science, public policy, and data journalism."),
        //new Class("CMPS 166A (EL)", "Game Theory and Applications I\nIntroduces modern game theory, including applications in social science, biology, and engineering. Topics include extensive form, strategic form, mixed strategies, incomplete information, repeated games, evolutionary games, and simulation techniques."),
        //new Class("CMPS 180 (EL)", "Database Systems I\nIntroduction to the concepts, approaches, tools, and methodology of database design. Covers the entity-relationship model, the relational model, relational algebra, relational calculus, commercial languages (such as SQL and QBE), functional dependencies, normal forms, and design theory. Other topics may include knowledge-bases, constraint databases, and alternative database models."),
        new Class("CMPS 181 (CP)",  "Database Systems II\nIntroduction to the architecture and implementation of database systems. Topics covered include data storage, tree and hash indexes, storage management, query evaluation and optimization, transaction management, concurrency control, recovery, and XML data management."),
        new Class("CMPS 182 (EL)",  "Introduction to Database Management Systems\nConcepts, approaches, tools, and methodology of database design. Topics include the entity-relationship model; the relational data model; normal forms; commercial languages such as SQL (SQL constraints, SQL triggers, and update languages); query-by-example (QBE); XML data model, and XML query language (XQuery); as well as relational database-management support for XML and object-relational features in database-management systems. Involves a database -application development project."),
        new Class("CMPS 183 (CP)",  "Web Applications\nThe World-Wde Web is one of the main mechanisms by which computer applications are delivered to users. This course introduces the design of Web applications. Students learn the main technologies involved, and build web applications as part of homework assignments and group class projects.(Formerly Hypermedia and the Web.)"),
        //new Class("CMPS 185 (DC)", "Technical Writing and Casfasfaommunication in Computer Science\nWriting and communication by computer science professionals to a technical audience. Geared toward students planning to pursue an advanced degree in computer science. Assignments include: cover letter and resume for job application, statement of purpose for graduate school application, algorithm description and analysis, user documentation, proposal preparation, critical analysis of published papers, survey of the literature, term paper, and oral presentations. May be repeated for credit."),

        new Class("AMS 10 (MR)",    "Mathematical Methods for Engineers I (subsitude with MATH21)\nApplications-oriented course on complex numbers and linear algebra integrating Matlab as a computational support tool. Introduction to complex algebra. Vectors, bases and transformations, matrix algebra, solutions of linear systems, inverses and determinants, eigenvalues and eigenvectors, and geometric transformations. Students cannot receive credit for this course and for courses 10A or Mathematics 21."),
        new Class("AMS 131 (MR)",   "Introduction to Probability Theory (subsitude with CMPE107)\nIntroduction to probability theory and its applications. Combinatorial analysis, axioms of probability and independence, random variables (discrete and continuous), joint probability distributions, properties of expectation, Central Limit Theorem, Law of Large Numbers, Markov chains. Students cannot receive credit for this course and course 203 and Computer Engineering 107."),

        new Class("MATH 19A (MR)",  "Calculus for Science, Engineering, and Mathematics\nThe limit of a function, calculating limits, continuity, tangents, velocities, and other instantaneous rates of change. Derivatives, the chain rule, implicit differentiation, higher derivatives. Exponential functions, inverse functions, and their derivatives. The mean value theorem, monotonic functions, concavity, and points of inflection. Applied maximum and minimum problems. Students cannot receive credit for both this course and course 11A or Applied Mathematics and Statistics 11A and 15A,or Economics 11A."),
        new Class("MATH 19B (MR)",  "Calculus for Science, Engineering, and Mathematics\nThe definite integral and the fundamental theorem of calculus. Areas, volumes. Integration by parts, trigonometric substitution, and partial fractions methods. Improper integrals. Sequences, series, absolute convergence and convergence tests. Power series, Taylor and Maclaurin series. Students cannot receive credit for both this course and course 11B, Applied Math and Statistics 11B and 15B, or Economics 11B. \nPrerequisite(s): course 19A or 20A or AP Calculus AB exam score of 4 or 5, or BC exam score of 3 or higher, or IB Mathematics Higher Level exam score of 5 of higher. (General Education Code(s): MF.)"),
        new Class("MATH 23A (MR)",  "Vector Calculus\nVectors in n-dimensional Euclidean space. The inner and cross products. The derivative of functions from n-dimensional to m-dimensional Euclidean space is studied as a linear transformation having matrix representation. Paths in 3-dimensions, arc length, vector differential calculus, Taylor's theorem in several variables, extrema of real-valued functions, constrained extrema and Lagrange multipliers, the implicit function theorem, some applications. Students cannot receive credit for this course and course 22. (Formerly Multivariable Calculus.)"),
        new Class("MATH 21 (MR)",   "Linear Algebra (subsitude with AMS10)\nSystems of linear equations matrices, determinants. Introduces abstract vector spaces, linear transformation, inner products, the geometry of Euclidean space, and eigenvalues. Students cannot receive credit for this course and Applied Mathematics and Statistics 10 or 10A."),


        new Class("CMPE 12 (MR)",   "Computer Systems and Assembly Language\nIntroduction to computer systems and assembly language and how computers compute in hardware and software. Topics include digital logic, number systems, data structures, compiling/assembly process, basics of system software, and computer architecture. May include C language. Students with no prior programming experience are strongly recommended to take course 3, Computer Science 5J, Computer Science 5P, Computer Science 10, or equivalent before taking this course.\nPrerequisite(s): previous or concurrent enrollment in course 12L is required. (General Education Code(s): IN, Q.)\nProfessor: Staff"), 
        new Class("CMPE 12L (MR)",  "Computer Systems and Assembly Language Laboratory\nIntroduction to computer systems and assembly language and how computers compute in hardware and software. Topics include digital logic, number systems, data structures, compiling/assembly process, basics of system software, and computer architecture. May include C language. Students with no prior programming experience are strongly recommended to take course 3, Computer Science 5J, Computer Science 5P, Computer Science 10, or equivalent before taking this course."),
        new Class("CMPE 16 (MR)",   "Applied Discrete Mathematics\nIntroduction to applications of discrete mathematical systems. Topics include sets, functions, relations, graphs, predicate calculus, mathematical proof methods (induction, contraposition, contradiction), counting methods (permutations, combinations), and recurrences. Examples are drawn from computer science and computer engineering. Knowledge of computer programming is useful before taking this course. Students who do not have prior programing experience are strongly recommended to take Computer Science 5C, 5J, or 5P before taking this course.\nPrerequisite(s): Mathematics 19A or 11B or Applied Mathematics and Statistics 11B or 15B or Economics 11B. (General Education Code(s): MF, Q.)\nProfessor: Tracy Larrabee (larrabee)"),
        new Class("CMPE 100 (EL)",  "Logic Design\nLaboratory sequence illustrating topics covered in course 100. Two 2-hour laboratory sessions per week. Weekly laboratory assignments which require the use of the oscilloscopes, TTL circuits, computer-aided design and simulation tools, and programmable logic. Students are billed a materials fee."),
        new Class("CMPE 100L (EL)", "Logic Design Laboratory\nLaboratory sequence illustrating topics covered in course 100. Two 2-hour laboratory sessions per week. Weekly laboratory assignments which require the use of the oscilloscopes, TTL circuits, computer-aided design and simulation tools, and programmable logic. Students are billed a materials fee."),
        new Class("CMPE 107 (MR)",  "Probability and Statistics for Engineers (subsitude with AMS131)\nIntroduction to fundamental tools of stochastic analysis. Probability, conditional probability; Bayes Theorem; random variables and transforms; independence; Bernnoulli trials. Statistics, inference from limited data; outcomes of repeated experiments; applications to design; assessment of relative frequency and probability; law of large numbers; precision of measurements. Elements of stochastic processes, Poisson processes; Markov chains. Students cannot receive credit for this course and Applied Mathematics and Statistics 131. (Formerly Mathematical Methods of Systems Analysis: Stochastic.)"),
        new Class("CMPE 110 (MR)",  "Computer Architecture\nIntroduction to computer architecture including examples of current approaches and the effect of technology and software. Computer performance evaluation, basic combinatorial and sequential digital components, different instruction set architectures with a focus on the MIPS ISA and RISC paradigm. Evolution of CPU microarchitecture from single-cycle to multi-cycle pipelines, with overview of super-scalar, multiple-issue and VLIW. Memory system, cache, virtual memory and relationship between memory and performance. Evolution of PC system architecture. May include advanced topics, such as parallel processing, MIMD, and SIMD."),
        //new Class("CMPE 118 (EL)", "Introduction to Mechatronics\nTechnologies involved in mechatronics (intelligent electro-mechanical systems) and techniques necessary to integrate these technologies into mechatronic systems. Topics include electronics (A/D, D/A converters, opamps, filters, power devices), software program design (event-driven programming, state machine-based design), DC and stepper motors, basic sensing, and basic mechanical design (machine elements and mechanical CAD). Combines lab component of structured assignments with a large and open-ended team project. Cannot receive credit for this course and course 218."),
        //new Class("CMPE 118L (EL)", "Introduction to Mechatronics Laboratory\nLaboratory sequence illustrating topics covered in course 118. Two 2-hour laboratory sessions per week. Students cannot receive credit for this course and course 218L. Students are billed a materials fee."),
        new Class("CMPE 121 (EL)",  "Microprocessor System Design\nPrerequisite(s): courses 12/L and 100/L and Electrical Engineering 101/L; and course 13/L or Computer Science 12B/M. Concurrent enrollment in course 121L required."),
        new Class("CMPE 121L (EL)", "Microprocessor System Design Laboratory\nLaboratory sequence illustrating topics covered in course 121. Two 2-hour laboratory sessions per week. Students design, build, program, debug, document, and demonstrate a microprocessor-based system. Students are billed a materials fee."),
        //new Class("CMPE 122 (EL)", "Introduction to VLSI Digital System Design\nIntroduces very large scale integrated (VLSI) custom integrated circuits. Topics include: semiconductor manufacturing, logic families, field-effect transistors (FETs), interconnect models, simulation, and circuits. Introduces the design flow from logic design to layout with a focus on high performance and low power. Students cannot receive credit for this course and course 222."),
        //new Class("CMPE 123A (EL)", "Engineering Design Project I\nFirst of a two-course sequence that is the culmination of the engineering program. Students apply knowledge and skills gained in elective track to complete a major design project. Students complete research, specification, planning, and procurement for a substantial project. Includes technical discussions, design reviews, and formal presentations; engineering design cycle, engineering teams, and professional practices. Formal technical specification of the approved project is presented to faculty. Students are billed a materials fee. Prerequisite(s): Computer Engineering 121; previous or concurrent enrollment in Computer Engineering 185; permission of department and instructor."),
        new Class("CMPE 123B (EL)", "Engineering Design Project II\nSecond of two-course sequence in engineering system design. Students fully implement and test system designed and specified in course 123A. Formal written report, oral presentation, and demonstration of successful project to review panel of engineering faculty required. Students are billed a materials fee."),
        new Class("CMPE 125 (EL)",  "Logic Design with Verilog\nVerilog digital logic design with emphasis on ASIC and FPGA design. Students design and verify large-scale systems. Assignments and project use the Verilog Hardware Description Language with emphasis on verification and high-frequency ASIC/FPGA targets."),
        new Class("CMPE 125L (EL)", "Logic Design with Verilog Laboratory\nLaboratory sequence illustrating topics covered in course 125. Two 2-hour laboratory sessions per week. Students are billed a materials fee."),
        //new Class("CMPE 129A (EL)", "Capstone Project I\nFirst of a three-course sequence in which students apply knowledge and skills gained in elective track to complete a major design project. In this first course, students complete the specification and planning for a substantial project. Topics covered: engineering design cycle, engineering teams, and professional practices."),
        //new Class("CMPE 129B", "Capstone Project II\nSecond of a three-course sequence in which students apply knowledge and skills gained in elective track to complete a major design project. In this second course, students complete the research and procurement for a substantial project and a preliminary implementation. Students are billed a materials fee. Prerequisite(s): courses 121, 121L, and 129A. Previous or concurrent enrollment in course 185. Enrollment by permission of instructor."),
        new Class("CMPE 129C (EL)", "Capstone Project III\nThird of a three-course sequence in which students apply knowledge and skills gained in elective track to complete a major design project. In this third course, students work in teams to complete the project specified and advanced in the first two courses. A formal written report, oral presentation, and demonstration of the successful project to a review panel of engineering faculty is required. Students are billed a materials fee. Prerequisite(s): courses 129B and 185. Enrollment by permission of instructor."),
        //new Class("CMPE 141 (EL)", "Feedback Control Systems\nAnalysis and design of continuous linear feedback control systems. Essential principles and advantages of feedback. Design by root locus, frequency response, and state space methods and comparisons of these techniques. Applications."),
        new Class("CMPE 145",       "Estimation and Introduction to Control of Stochastic Processes\nProvides practical knowledge of Kalman filtering and introduces control theory for stochastic processes. Selected topics include: state-space modeling; discrete- and continuous-time Kalman filter; smoothing; and applications in feedback control. Students learn through hands-on experience. Students cannot receive credit for this course and course 245. Enrollment by permission of instructor. (Formerly Applied Mathematics and Statistics 118.)"),
        //new Class("CMPE 149 (EL)", "Introduction to Cyber-physical Systems"),
        //new Class("CMPE 150 (EL)", "Introduction to Computer Networks\nAddresses issues arising in organizing communications among autonomous computers. Network models and conceptual layers; Internet-working; characteristics of transmission media; switching techniques (packet switching, circuit switching, cell switching); medium access control (MAC) protocols and local area networks; error-control strategies and link-level protocols; routing algorithms for bridges and routers; congestion control mechanisms; transport protocols; application of concepts to practical wireless and wireline networks and standard protocol architectures. Students who have completed course 80N can take this course for credit."),
        //new Class("CMPE 150L (EL)", "Introduction to Computer Networks Laboratory\nIllustrates the concepts covered in course 150 and provides students with hands-on experience in computer networks. Students are billed a materials fee."),
        new Class("CMPE 151 (EL)",  "Advanced Computer Networks\nProvides an in-depth coverage of fundamental topics introduced in course 150 including routing, transport, and internetworking. Also introduces advanced concepts not covered in course 150 including wireless, application-layer services, security, etc. (Formerly Network Administration.)"),
        new Class("CMPE 151L(EL)",  "Advanced Computer Networks Laboratory\nLaboratory illustrating the concepts covered in course 151: provides students with hands-on experience in computer networks. Students are billed a materials fee."),
        new Class("CMPE 153 (EL)",  "Digital Signal Processing\nIntroduction to the principles of signal processing, including discrete-time signals and systems, the z-transform, sampling of continuous-time signals, transform analysis of linear time-invariant systems, structures for discrete-time systems, the discrete Fourier transform, computation of the discrete Fourier transform, and filter design techniques. Taught in conjunction with Electrical Engineering 250. Students cannot receive credit for this course and Electrical Engineering 250."),
        //new Class("CMPE 156 (EL)", "Network Programming\nMethods and tools used for network programming. Topics include: operating system (OS) support for network protocols; inter-process communication (IPC) facilities, such as pipes, sockets, and remote procedure call (RPC); design of client and server sides of network applications; network security; and programming projects."),
        //new Class("CMPE 156L (EL)", "Network Programming Laboratory\nLaboratory sequence illustrating concepts taught in course 156. Students learn use of network programming tools and methods via programming exercises. Students are billed a materials fee."),
        new Class("CMPE 161 (EL)",  "Mobile Sensing and Interaction\nProvides hands-on knowledge and experience with modern mobile computing platforms for sensing and interactions tasks. Students learn how to create usable applications on a sensor-laden, mobile computing platform with adequate level of user interface."),
        //new Class("CMPE 167 (EL)", "Sensing and Sensor Technologies\nIntroduces fundamental issues in sensing of temperature, motion, sound, light, position, etc. Sensors are integrated into a digital system using filtering, amplification, and analog-to-digital conversion. Advanced topics may include noise, temperature, and other sources of variability."),
        //new Class("CMPE 167L (EL)", "Sensing and Sensor Technologies Lab\nIntroduces fundamental issues in sensing of temperature, motion, sound, light, position, etc. Sensors are integrated into a digital system using filtering, amplification, and analog-to-digital conversion. Advanced topics may include noise, temperature, and other sources of variability."),
        new Class("CMPE 185 (CP)",  "Technical Writing for Computer Engineers\nWriting by engineers and computer scientists, not to general audiences, but to engineers, engineering managers, and technical writers. Exercises include job application and resume, in-code documentation, algorithm description, naive-user documentation, library puzzle, survey article, proposal, progress report, formal technical report, and oral presentation. Offered in alternate quarters. Enrollment restricted to majors in Computer Engineering, Electrical Engineering, Bioengineering, Bioinformatics, Robotics Engineering, or Network and Digital Technology, or by permission of instructor.")

    ]));

    storage.setItem("summerList", JSON.stringify([
    new Class("CMPS 5J (MR)(S1)",   "Introduction to Programming in Java\nIntroduces programming in Java for students who have no prior programming experience. Students learn programming and documentation skills, as well as algorithmic problem-solving, and programming methodologies. Introduces computers, compilers, and editors. Students write small to medium-sized programs. This course and courses 5C and 5P cover similar concepts, but use different programming languages. Because 5J followed by course 11 is a two-quarter alternative to the accelerated course 12A/L, engineering majors and students planning on continuing the programming sequence are encouraged to take 5J rather than 5C or 5P. Students may not receive credit for 5J taken concurrently or subsequently to course 12A, 12B, or Computer Engineering 13."),
    new Class("CMPS 5P(8W)",        "Introduction to Programming in Python\nIntroduces programming in Python, a high-level programming language used in the physical and social sciences and for Internet scripting. Students learn programming and documentation skills, as well as algorithmic problem-solving, coding, and debugging methodologies. Students write programs to solve sample problems drawn from a wide range of disciplines, primarily in the sciences. No prior programming experience is required, but a mathematics background at the pre-calculus level is assumed. This course and courses 5C and 5J cover similar concepts, but use different programming languages. Students may not receive credit for course 5P after receiving credit for course 11, 12A, or Computer Engineering 13."),
    new Class("CMPS 12B (MR)(8W)",  "Introduction to Data Structures\nTeaches students to implement common data structures and the algorithms associated with each data structure, through progressively difficult exercises. Topics include big 'O' notation; pointers, recursion (induction), and dynamic allocation; linked lists and list processing; stacks, queues, binary trees and binary search trees; simple sorting techniques and simple search techniques. Students will gain a working knowledge of the elements of the Java and C programming languages. Prior experience with Unix is assumed."),
    new Class("CMPS 12M (MR)(8W)",  "Data Structures Laboratory\nComplements course 12B, gaining additional competence with a number of important software development tools, languages, and techniques. Included are advanced Unix features and utilities such as grep, find, diff, the shell, and pipes; C programs utilizing I/O, arrays, pointers, and structures; a scripting language to perform simple text and file manipulation; and the make utility."),
    new Class("CMPS 101 (MR)(8W)",  "Algorithms and Abstract Data Types\nStudies basic algorithms and their relationships to common abstract data types. Covers the notions of abstract data types and the distinction between an abstract data type and an implementation of that data type. The complexity analysis of common algorithms using asymptotic (big 'O') notation is emphasized. Topics include sorting and searching techniques, basic graph algorithms, and algorithm design techniques. Abstract data types covered include priority queues, dictionaries, disjoint sets, heaps, balanced trees, and hashing. Familiarity with C, Java, and Unix is assumed."),
    new Class("CMPS 109 (EL)(8W)",  "Advanced Programming\nAn introduction to object-oriented techniques of software development including data abstraction, inheritance, polymorphism, and object-oriented design. Extensive practice using a computer to solve problems, including construction of graphical user interfaces and a multithreaded client/server applications."),
    new Class("CMPS 115 (DC)(S1)",  " Introduction to Software Engineering\nEmphasizes the characteristics of well-engineered software systems. Topics include requirements analysis and specification, design, programming, verification and validation, maintenance, and project management. Practical and research methods are studied. Imparts an understanding of the steps used to effectively develop computer software. (Formerly Software Methodology.)"),

    new Class("AMS 131 (MR)(S1||S2)", "Introduction to Probability Theory (subsitude with CMPE107)\nIntroduction to probability theory and its applications. Combinatorial analysis, axioms of probability and independence, random variables (discrete and continuous), joint probability distributions, properties of expectation, Central Limit Theorem, Law of Large Numbers, Markov chains. Students cannot receive credit for this course and course 203 and Computer Engineering 107."),

    new Class("MATH 19A (MR)(S1||S2)", "Calculus for Science, Engineering, and Mathematics\nThe limit of a function, calculating limits, continuity, tangents, velocities, and other instantaneous rates of change. Derivatives, the chain rule, implicit differentiation, higher derivatives. Exponential functions, inverse functions, and their derivatives. The mean value theorem, monotonic functions, concavity, and points of inflection. Applied maximum and minimum problems. Students cannot receive credit for both this course and course 11A or Applied Mathematics and Statistics 11A and 15A,or Economics 11A."),
    new Class("MATH 19B (MR)(S1||S2)", "Calculus for Science, Engineering, and Mathematics\nThe definite integral and the fundamental theorem of calculus. Areas, volumes. Integration by parts, trigonometric substitution, and partial fractions methods. Improper integrals. Sequences, series, absolute convergence and convergence tests. Power series, Taylor and Maclaurin series. Students cannot receive credit for both this course and course 11B, Applied Math and Statistics 11B and 15B, or Economics 11B. \nPrerequisite(s): course 19A or 20A or AP Calculus AB exam score of 4 or 5, or BC exam score of 3 or higher, or IB Mathematics Higher Level exam score of 5 of higher. (General Education Code(s): MF.)"),
    new Class("MATH 23A (MR)(S1||S2)", "Vector Calculus\nVectors in n-dimensional Euclidean space. The inner and cross products. The derivative of functions from n-dimensional to m-dimensional Euclidean space is studied as a linear transformation having matrix representation. Paths in 3-dimensions, arc length, vector differential calculus, Taylor's theorem in several variables, extrema of real-valued functions, constrained extrema and Lagrange multipliers, the implicit function theorem, some applications. Students cannot receive credit for this course and course 22. (Formerly Multivariable Calculus.)"),
    new Class("MATH 21 (MR)(S1||S2)", "Linear Algebra (subsitude with AMS10)\nSystems of linear equations matrices, determinants. Introduces abstract vector spaces, linear transformation, inner products, the geometry of Euclidean space, and eigenvalues. Students cannot receive credit for this course and Applied Mathematics and Statistics 10 or 10A."),

    new Class("CMPE 12 (MR)(10W)", "Computer Systems and Assembly Language\nIntroduction to computer systems and assembly language and how computers compute in hardware and software. Topics include digital logic, number systems, data structures, compiling/assembly process, basics of system software, and computer architecture. May include C language. Students with no prior programming experience are strongly recommended to take course 3, Computer Science 5J, Computer Science 5P, Computer Science 10, or equivalent before taking this course.\nPrerequisite(s): previous or concurrent enrollment in course 12L is required. (General Education Code(s): IN, Q.)\nProfessor: Staff"), 
    new Class("CMPE 12L (MR)(10W)", "Computer Systems and Assembly Language Laboratory\nIntroduction to computer systems and assembly language and how computers compute in hardware and software. Topics include digital logic, number systems, data structures, compiling/assembly process, basics of system software, and computer architecture. May include C language. Students with no prior programming experience are strongly recommended to take course 3, Computer Science 5J, Computer Science 5P, Computer Science 10, or equivalent before taking this course."),
    new Class("CMPE 16 (MR)(8W)", "Applied Discrete Mathematics\nIntroduction to applications of discrete mathematical systems. Topics include sets, functions, relations, graphs, predicate calculus, mathematical proof methods (induction, contraposition, contradiction), counting methods (permutations, combinations), and recurrences. Examples are drawn from computer science and computer engineering. Knowledge of computer programming is useful before taking this course. Students who do not have prior programing experience are strongly recommended to take Computer Science 5C, 5J, or 5P before taking this course.\nPrerequisite(s): Mathematics 19A or 11B or Applied Mathematics and Statistics 11B or 15B or Economics 11B. (General Education Code(s): MF, Q.)\nProfessor: Tracy Larrabee (larrabee)"),
    new Class("CMPE 107 (MR)(S2)", "Probability and Statistics for Engineers (subsitude with AMS131)\nIntroduction to fundamental tools of stochastic analysis. Probability, conditional probability; Bayes Theorem; random variables and transforms; independence; Bernnoulli trials. Statistics, inference from limited data; outcomes of repeated experiments; applications to design; assessment of relative frequency and probability; law of large numbers; precision of measurements. Elements of stochastic processes, Poisson processes; Markov chains. Students cannot receive credit for this course and Applied Mathematics and Statistics 131. (Formerly Mathematical Methods of Systems Analysis: Stochastic.)")

    ]));

    // storage.setItem("isStorage", "1");
    storage.setItem("fallTable", JSON.stringify([
        new Table(0, "&nbsp", ""), new Table(1, "&nbsp", ""), new Table(2, "&nbsp", ""),
        new Table(3, "&nbsp", ""), new Table(4, "&nbsp", ""), new Table(5, "&nbsp", ""),
        new Table(6, "&nbsp", ""), new Table(7, "&nbsp", ""), new Table(8, "&nbsp", ""),
        new Table(9, "&nbsp", ""), new Table(10, "&nbsp", ""), new Table(11, "&nbsp", ""),
        new Table(12, "&nbsp", ""), new Table(13, "&nbsp", ""), new Table(14, "&nbsp", "")
    ]));
    storage.setItem("winterTable", JSON.stringify([
        new Table(0, "&nbsp", ""), new Table(1, "&nbsp", ""), new Table(2, "&nbsp", ""),
        new Table(3, "&nbsp", ""), new Table(4, "&nbsp", ""), new Table(5, "&nbsp", ""),
        new Table(6, "&nbsp", ""), new Table(7, "&nbsp", ""), new Table(8, "&nbsp", ""),
        new Table(9, "&nbsp", ""), new Table(10, "&nbsp", ""), new Table(11, "&nbsp", ""),
        new Table(12, "&nbsp", ""), new Table(13, "&nbsp", ""), new Table(14, "&nbsp", "")
    ]));
    storage.setItem("springTable", JSON.stringify([
        new Table(0, "&nbsp", ""), new Table(1, "&nbsp", ""), new Table(2, "&nbsp", ""),
        new Table(3, "&nbsp", ""), new Table(4, "&nbsp", ""), new Table(5, "&nbsp", ""),
        new Table(6, "&nbsp", ""), new Table(7, "&nbsp", ""), new Table(8, "&nbsp", ""),
        new Table(9, "&nbsp", ""), new Table(10, "&nbsp", ""), new Table(11, "&nbsp", ""),
        new Table(12, "&nbsp", ""), new Table(13, "&nbsp", ""), new Table(14, "&nbsp", "")
    ]));
    storage.setItem("summerTable", JSON.stringify([
        new Table(0, "&nbsp", ""), new Table(1, "&nbsp", ""), new Table(2, "&nbsp", ""),
        new Table(3, "&nbsp", ""), new Table(4, "&nbsp", ""), new Table(5, "&nbsp", ""),
        new Table(6, "&nbsp", ""), new Table(7, "&nbsp", ""), new Table(8, "&nbsp", ""),
        new Table(9, "&nbsp", ""), new Table(10, "&nbsp", ""), new Table(11, "&nbsp", ""),
        new Table(12, "&nbsp", ""), new Table(13, "&nbsp", ""), new Table(14, "&nbsp", "")
    ]));
}

//reload data
function readFromData() {
    fallList = JSON.parse(storage.getItem("fallList"));
    winterList = JSON.parse(storage.getItem("winterList"));
    springList = JSON.parse(storage.getItem("springList"));
    summerList = JSON.parse(storage.getItem("summerList"));

    fallTable = JSON.parse(storage.getItem("fallTable"));
    winterTable = JSON.parse(storage.getItem("winterTable"));
    springTable = JSON.parse(storage.getItem("springTable"));
    summerTable = JSON.parse(storage.getItem("summerTable"));
}